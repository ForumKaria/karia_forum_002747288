/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package UI;

import AppSystem.AppSystem;
import Branch.Branch;
import Customer.Customer;
import Library.Library;
import Library.Material.Book;
import Library.Material.Magazine;
import Library.RentalRequest.RentalRequest;
import Useraccount.UserAccount;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author forumkaria
 */
public class CustomerJFrame extends javax.swing.JFrame {

    /**
     * Creates new form CustomerJFrame
     */
    private AppSystem appSystem;
    UserAccount userAccount;
    Branch branch;
    Customer customer;
    RentalRequest curRentalRequest;

    Library library;

    private DefaultTableModel bookTableModel;
    private DefaultTableModel magazineTableModel;
    private DefaultTableModel historytableModel;

    public CustomerJFrame() {
        initComponents();
    }

    public CustomerJFrame(AppSystem appSystem, Branch branch, UserAccount useraccount) {
        initComponents();
        this.setVisible(true);

        this.appSystem = appSystem;
//        this.branch = branch;
//        this.library = branch.getLibrary();
        this.userAccount = useraccount;
        this.customer = appSystem.getCustomerDirectory().findById(useraccount.getAccountId());

        this.bookTableModel = (DefaultTableModel) bookTable.getModel();
        this.magazineTableModel = (DefaultTableModel) magazineTable.getModel();
        this.historytableModel = (DefaultTableModel) historyTable.getModel();

        populateBook();
        populateMagazine();
        populateRental();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        materialSerialNoTxt = new javax.swing.JTextField();
        materialTitleTxt = new javax.swing.JTextField();
        durationTxt = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        historyTable = new javax.swing.JTable();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        rentBtn = new javax.swing.JButton();
        logoutBtn = new javax.swing.JButton();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        materialTypeTxt = new javax.swing.JTextField();
        jScrollPane3 = new javax.swing.JScrollPane();
        bookTable = new javax.swing.JTable();
        jScrollPane4 = new javax.swing.JScrollPane();
        magazineTable = new javax.swing.JTable();
        returnBtn = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        branchName = new javax.swing.JTextField();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setBackground(new java.awt.Color(255, 255, 255));
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jPanel1.setBackground(new java.awt.Color(255, 255, 255));

        jLabel1.setText("MATERIAL TITLE");

        jLabel2.setText("DURATION");

        materialSerialNoTxt.setBackground(new java.awt.Color(204, 204, 204));

        materialTitleTxt.setBackground(new java.awt.Color(204, 204, 204));

        durationTxt.setBackground(new java.awt.Color(204, 204, 204));

        historyTable.setBackground(new java.awt.Color(204, 204, 204));
        historyTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null}
            },
            new String [] {
                "Request ID", "Title", "Status", "Price", "Material Type", "Branch"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.Object.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        jScrollPane1.setViewportView(historyTable);

        jLabel4.setText("MATERIAL SERIAL NO");

        jLabel5.setText("Magazines Available");

        jLabel6.setFont(new java.awt.Font("Big Caslon", 1, 13)); // NOI18N
        jLabel6.setText("RENTED HISTORY");

        rentBtn.setFont(new java.awt.Font("Lucida Grande", 1, 13)); // NOI18N
        rentBtn.setText("RENT");
        rentBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rentBtnActionPerformed(evt);
            }
        });

        logoutBtn.setFont(new java.awt.Font("Lucida Grande", 1, 13)); // NOI18N
        logoutBtn.setText("LOGOUT");
        logoutBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                logoutBtnActionPerformed(evt);
            }
        });

        jLabel7.setText("Books Available");

        jLabel8.setText("MATERIAL TYPE");

        materialTypeTxt.setBackground(new java.awt.Color(204, 204, 204));

        bookTable.setBackground(new java.awt.Color(204, 204, 204));
        bookTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null}
            },
            new String [] {
                "Serial No", "Name", "Register date", "Author", "Genre", "Pages", "Language", "Binding", "Is Available", "Library"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.Integer.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.Integer.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        bookTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                bookTableMouseClicked(evt);
            }
        });
        jScrollPane3.setViewportView(bookTable);

        magazineTable.setBackground(new java.awt.Color(204, 204, 204));
        magazineTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null}
            },
            new String [] {
                "Serial No", "Name", "Register date", "Company", "Issue type", "Is Available", "Library"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Object.class, java.lang.Object.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.Integer.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        magazineTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                magazineTableMouseClicked(evt);
            }
        });
        jScrollPane4.setViewportView(magazineTable);

        returnBtn.setFont(new java.awt.Font("Lucida Grande", 1, 13)); // NOI18N
        returnBtn.setText("RETURN");
        returnBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                returnBtnActionPerformed(evt);
            }
        });

        jLabel3.setText("BRANCH");

        branchName.setBackground(new java.awt.Color(204, 204, 204));

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addGap(16, 16, 16)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel1)
                    .addComponent(jLabel2)
                    .addComponent(jLabel4)
                    .addComponent(jLabel8)
                    .addComponent(jLabel3))
                .addGap(102, 102, 102)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(branchName, javax.swing.GroupLayout.DEFAULT_SIZE, 77, Short.MAX_VALUE)
                    .addComponent(durationTxt, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(materialTitleTxt)
                    .addComponent(materialSerialNoTxt, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(materialTypeTxt, javax.swing.GroupLayout.DEFAULT_SIZE, 77, Short.MAX_VALUE))
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(1, 1, 1)
                        .addComponent(jLabel6)
                        .addGap(152, 152, 152))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 100, Short.MAX_VALUE)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 387, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 15, Short.MAX_VALUE)
                        .addComponent(logoutBtn))))
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(261, 261, 261)
                        .addComponent(rentBtn)
                        .addGap(171, 171, 171)
                        .addComponent(returnBtn))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 879, Short.MAX_VALUE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 108, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel5)))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jScrollPane4)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap(10, Short.MAX_VALUE)
                .addComponent(jLabel6)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(108, 108, 108)
                                .addComponent(logoutBtn))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(5, 5, 5)
                                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 237, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(returnBtn)
                            .addComponent(rentBtn)))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(3, 3, 3)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel8)
                            .addComponent(materialTypeTxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel4)
                            .addComponent(materialSerialNoTxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel1)
                            .addComponent(materialTitleTxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel2)
                            .addComponent(durationTxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel3)
                            .addComponent(branchName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 18, Short.MAX_VALUE)
                .addComponent(jLabel7)
                .addGap(18, 18, 18)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 123, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(24, 24, 24)
                .addComponent(jLabel5)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 123, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        getContentPane().add(jPanel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, -1, -1));

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void bookTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_bookTableMouseClicked
        // TODO add your handling code here:
        int selectedRow = bookTable.getSelectedRow();
        String id = (String) bookTable.getValueAt(selectedRow, 0);
        String brName = (String) bookTable.getValueAt(selectedRow, 9);
        String mTitle = (String) bookTable.getValueAt(selectedRow, 1);

        materialSerialNoTxt.setText(id);
        materialTypeTxt.setText("Book");
        branchName.setText(brName);
        materialTitleTxt.setText(mTitle);
    }//GEN-LAST:event_bookTableMouseClicked

    private void magazineTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_magazineTableMouseClicked
        // TODO add your handling code here:
        int selectedRow = magazineTable.getSelectedRow();
        String sid = (String) magazineTable.getValueAt(selectedRow, 0);
        String brName = (String) magazineTable.getValueAt(selectedRow, 6);
        String mTitle = (String) magazineTable.getValueAt(selectedRow, 1);

        materialSerialNoTxt.setText(sid);
        materialTypeTxt.setText("Magazine");
        branchName.setText(brName);
        materialTitleTxt.setText(mTitle);

    }//GEN-LAST:event_magazineTableMouseClicked

    private void rentBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rentBtnActionPerformed
        // TODO add your handling code here:
        
//        RentalRequest curRentalRequest = this.appSystem.getCustomerDirectory().findById(userAccount.getAccountId()).getCurRentalRequest();
//        Boolean requestAlreadyExists = false;
//       
//            for( RentalRequest customerRentalRequest: this.customer.getCustomerRentalRequests()){
//                if(customerRentalRequest.getId().equals(this.selectedMat == "mag" ? this.selectedMag.getId() : this.selectedBook.getId())){
//                    requestAlreadyExists = false;
//                }
//            }
//        }
//        if (validationsDone) {


        if ((materialSerialNoTxt.getText().isEmpty())) {
            JOptionPane.showMessageDialog(null, "Select any material first");
        } else {
            String materialserial = materialSerialNoTxt.getText();
            System.out.println("THISSSSSSSSS......... " + materialserial);
            String duration = durationTxt.getText();

            Book book = this.appSystem.findBranch(branchName.getText()).getLibrary().getBookDirectory().findBookById(materialserial);
            Magazine mag = this.appSystem.findBranch(branchName.getText()).getLibrary().getMagazineDirectory().findMagazineById(materialserial);
            Boolean notAvailable = false;
            if (book == null) {
                if (!mag.getIsAvailable()) {
                    notAvailable = true;
                }
            } else {
                if (!book.getIsAvailable()) {
                    notAvailable = true;
                }
            }
            if (notAvailable) {
                JOptionPane.showMessageDialog(null, "Material is not available for renting");

            } else {
                RentalRequest rr = this.appSystem.findBranch(branchName.getText()).getLibrary().getRentalRequestDirectory()
                        .requestRent(Integer.parseInt(duration), book, mag, branchName.getText(), customer);
                this.appSystem.getCustomerDirectory().findById(customer.getId()).addRequest(rr);

                populateRental();
                populateBook();
                populateMagazine();
            }
        }
    }//GEN-LAST:event_rentBtnActionPerformed

    private void returnBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_returnBtnActionPerformed
        // TODO add your handling code here:
        int selectedRow = historyTable.getSelectedRow();
        String reqId = (String) historyTable.getValueAt(selectedRow, 0);
        String reqStatus = (String) historyTable.getValueAt(selectedRow, 2);
        String mType = (String) historyTable.getValueAt(selectedRow, 4);
        String brName = (String) historyTable.getValueAt(selectedRow, 5);

        if (reqStatus == "Rented") {
            //change selected request status to "returned"
            this.appSystem.getCustomerDirectory().findById(customer.getId())
                    .returnRequest(this.userAccount.getAccountId());
            System.out.print("HERE" + reqId);
            //change material status to available
            this.appSystem.findBranch(brName).getLibrary().returnedRentalReq(reqId, mType);
            JOptionPane.showMessageDialog(null, "Returned Material");
            populateRental();
                populateBook();
                populateMagazine();
        } else {
            JOptionPane.showMessageDialog(null, "Selected Material is not rented");
        }

        //repopulate tables to reflect the avail flag
        populateBook();
        populateMagazine();
        populateRental();

        //clear the selected request id label
        materialSerialNoTxt.setText("");


    }//GEN-LAST:event_returnBtnActionPerformed

    private void logoutBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_logoutBtnActionPerformed
        // TODO add your handling code here:

        this.setVisible(false);
        MainJFrame mj = new MainJFrame(this.appSystem);
    }//GEN-LAST:event_logoutBtnActionPerformed

    public void populateBook() {
        SimpleDateFormat DateFormat = new SimpleDateFormat("yyyy-MM-dd");

        bookTableModel.setRowCount(0);
        for (Branch br : this.appSystem.getBranches()) {
            for (Book b : br.getLibrary().getBookDirectory().getBooks()) {
                Object[] row = new Object[10];

                row[0] = b.getMaterialId();
                row[1] = b.getName();
                row[2] = DateFormat.format(b.getDate());
                row[3] = b.getAuthor().getName();
                row[4] = b.getGenre().getGenre();
                row[5] = b.getPages();
                row[6] = b.getLanguage();
                row[7] = b.getBindingType();
                row[8] = b.getAvailability(b.getIsAvailable());
                row[9] = br.getName();

                bookTableModel.addRow(row);
            }
        }
    }

    public void populateMagazine() {
        SimpleDateFormat DateFormat = new SimpleDateFormat("yyyy-MM-dd");

        magazineTableModel.setRowCount(0);
        for (Branch br : this.appSystem.getBranches()) {
            for (Magazine m : br.getLibrary().getMagazineDirectory().getMagazines()) {
                Object[] row = new Object[7];

                row[0] = m.getMaterialId();
                row[1] = m.getName();
                row[2] = DateFormat.format(m.getDate());
                row[3] = m.getCompany();
                row[4] = m.getIssueType();
                row[5] = m.getAvailability(m.getIsAvailable());
                row[6] = br.getName();

                magazineTableModel.addRow(row);
            }
        }
    }

    public void populateRental() {
//        ArrayList<RentalRequest> cusRentals = this.appSystem.getCustomerDirectory().findById(userAccount.getAccountId()).getCustomerRentalRequests();
        System.out.println("HERRRRRRRRe: ");
        Customer c = this.appSystem.getCustomerDirectory().findById(userAccount.getAccountId());
        System.out.println("C NAMEEEEEE: " + c.getName());
        System.out.println("Request " + c.getCustomerRentalRequests());

        if (c.getCustomerRentalRequests().size() > 0) {
            historytableModel.setRowCount(0);

            for (RentalRequest rr : c.getCustomerRentalRequests()) {
                Object[] row = new Object[7];

                row[0] = rr.getId();
                row[1] = rr.getMagazine() == null ? rr.getBook().getName() : rr.getMagazine().getName();
                row[2] = rr.getStatus();
                row[3] = rr.getPrice();
                row[4] = rr.getMagazine() == null ? "Book" : "Magazine";
                row[5] = rr.getBranchName();
                historytableModel.addRow(row);
            }

        }
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(CustomerJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(CustomerJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(CustomerJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(CustomerJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new CustomerJFrame().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTable bookTable;
    private javax.swing.JTextField branchName;
    private javax.swing.JTextField durationTxt;
    private javax.swing.JTable historyTable;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JButton logoutBtn;
    private javax.swing.JTable magazineTable;
    private javax.swing.JTextField materialSerialNoTxt;
    private javax.swing.JTextField materialTitleTxt;
    private javax.swing.JTextField materialTypeTxt;
    private javax.swing.JButton rentBtn;
    private javax.swing.JButton returnBtn;
    // End of variables declaration//GEN-END:variables
}
